#ifndef __ACTIVATION_LUT_H__
#define __ACTIVATION_LUT_H__


// -----------------------
// activation function constants
// -----------------------
// number of points in the look-up table
#define SPINN_SIGMD_RES 256

// look-up table LOGISTIC function
// not all values are used!
//TODO: should compute this from other values!
#define SPINN_SIGMD_MAX_INPUT     ( 8.0 * (1 << SPINN_NET_SHIFT))
#define SPINN_SIGMD_MIN_INPUT     (-8.0 * (1 << SPINN_NET_SHIFT))
#define SPINN_SIGMD_MAX_DERIV     (0.25 * (1 << SPINN_ACTIV_SHIFT))
#define SPINN_SIGMD_MIN_DERIV     0
#define SPINN_SIGMD_MAX_OFFSET    (0.50 * (1 << SPINN_ACTIV_SHIFT))
#define SPINN_SIGMD_LUT_SHIFT     22
#define SPINN_SIGMD_LUT_IMASK     ((1 << SPINN_SIGMD_LUT_SHIFT) - 1)
#define SPINN_INVSIG_LUT_SHIFT    6
#define SPINN_INVSIG_LUT_IMASK    ((1 << SPINN_INVSIG_LUT_SHIFT) - 1)


// -----------------------
// activation look-up tables
// -----------------------
// look-up table LOGISTIC function
const activation_t sigmoid_lut[SPINN_SIGMD_RES] =
{
  0x4000, 0x40ff, 0x41ff, 0x42ff, 0x43fe, 0x44fd, 0x45fb, 0x46f8,
  0x47f5, 0x48f0, 0x49eb, 0x4ae4, 0x4bdc, 0x4cd2, 0x4dc7, 0x4ebb,
  0x4fac, 0x509c, 0x518a, 0x5275, 0x535f, 0x5447, 0x552c, 0x560e,
  0x56ef, 0x57cd, 0x58a8, 0x5981, 0x5a57, 0x5b2a, 0x5bfa, 0x5cc8,
  0x5d93, 0x5e5b, 0x5f20, 0x5fe2, 0x60a1, 0x615d, 0x6215, 0x62cb,
  0x637e, 0x642e, 0x64da, 0x6584, 0x662a, 0x66ce, 0x676e, 0x680c,
  0x68a6, 0x693d, 0x69d1, 0x6a62, 0x6af1, 0x6b7c, 0x6c04, 0x6c8a,
  0x6d0c, 0x6d8c, 0x6e09, 0x6e83, 0x6efb, 0x6f6f, 0x6fe1, 0x7051,
  0x70bd, 0x7128, 0x718f, 0x71f5, 0x7257, 0x72b8, 0x7316, 0x7372,
  0x73cb, 0x7422, 0x7477, 0x74ca, 0x751b, 0x756a, 0x75b6, 0x7601,
  0x764a, 0x7691, 0x76d6, 0x7719, 0x775a, 0x779a, 0x77d8, 0x7814,
  0x784f, 0x7888, 0x78bf, 0x78f5, 0x792a, 0x795d, 0x798e, 0x79bf,
  0x79ed, 0x7a1b, 0x7a47, 0x7a72, 0x7a9c, 0x7ac5, 0x7aed, 0x7b13,
  0x7b38, 0x7b5d, 0x7b80, 0x7ba2, 0x7bc3, 0x7be4, 0x7c03, 0x7c21,
  0x7c3f, 0x7c5c, 0x7c78, 0x7c93, 0x7cad, 0x7cc6, 0x7cdf, 0x7cf7,
  0x7d0f, 0x7d25, 0x7d3b, 0x7d51, 0x7d65, 0x7d79, 0x7d8d, 0x7da0,
  0x7db2, 0x7dc4, 0x7dd5, 0x7de6, 0x7df6, 0x7e06, 0x7e15, 0x7e24,
  0x7e33, 0x7e41, 0x7e4e, 0x7e5b, 0x7e68, 0x7e75, 0x7e81, 0x7e8c,
  0x7e97, 0x7ea2, 0x7ead, 0x7eb7, 0x7ec1, 0x7ecb, 0x7ed4, 0x7ede,
  0x7ee6, 0x7eef, 0x7ef7, 0x7eff, 0x7f07, 0x7f0f, 0x7f16, 0x7f1d,
  0x7f24, 0x7f2b, 0x7f31, 0x7f38, 0x7f3e, 0x7f44, 0x7f49, 0x7f4f,
  0x7f54, 0x7f5a, 0x7f5f, 0x7f64, 0x7f68, 0x7f6d, 0x7f72, 0x7f76,
  0x7f7a, 0x7f7e, 0x7f82, 0x7f86, 0x7f8a, 0x7f8d, 0x7f91, 0x7f94,
  0x7f98, 0x7f9b, 0x7f9e, 0x7fa1, 0x7fa4, 0x7fa7, 0x7fa9, 0x7fac,
  0x7fae, 0x7fb1, 0x7fb3, 0x7fb6, 0x7fb8, 0x7fba, 0x7fbc, 0x7fbe,
  0x7fc0, 0x7fc2, 0x7fc4, 0x7fc6, 0x7fc8, 0x7fc9, 0x7fcb, 0x7fcd,
  0x7fce, 0x7fd0, 0x7fd1, 0x7fd3, 0x7fd4, 0x7fd5, 0x7fd7, 0x7fd8,
  0x7fd9, 0x7fda, 0x7fdb, 0x7fdd, 0x7fde, 0x7fdf, 0x7fe0, 0x7fe1,
  0x7fe2, 0x7fe3, 0x7fe3, 0x7fe4, 0x7fe5, 0x7fe6, 0x7fe7, 0x7fe8,
  0x7fe8, 0x7fe9, 0x7fea, 0x7fea, 0x7feb, 0x7fec, 0x7fec, 0x7fed,
  0x7fed, 0x7fee, 0x7fee, 0x7fef, 0x7ff0, 0x7ff0, 0x7ff0, 0x7ff1,
  0x7ff1, 0x7ff2, 0x7ff2, 0x7ff3, 0x7ff3, 0x7ff3, 0x7ff4, 0x7ff4
};

// look-up table LOGISTIC PRIME function
const activation_t sigmoid_prime_lut[SPINN_SIGMD_RES] =
{
  0x2000, 0x1ffe, 0x1ff8, 0x1fee, 0x1fe0, 0x1fce, 0x1fb8, 0x1f9e,
  0x1f81, 0x1f60, 0x1f3b, 0x1f12, 0x1ee6, 0x1eb7, 0x1e84, 0x1e4d,
  0x1e14, 0x1dd8, 0x1d98, 0x1d56, 0x1d11, 0x1cc9, 0x1c7f, 0x1c32,
  0x1be3, 0x1b92, 0x1b3f, 0x1aeb, 0x1a94, 0x1a3c, 0x19e2, 0x1987,
  0x192a, 0x18cc, 0x186e, 0x180e, 0x17ae, 0x174d, 0x16ec, 0x168a,
  0x1628, 0x15c5, 0x1563, 0x1500, 0x149e, 0x143c, 0x13da, 0x1378,
  0x1317, 0x12b6, 0x1256, 0x11f6, 0x1197, 0x1139, 0x10dc, 0x1080,
  0x1025, 0x0fca, 0x0f71, 0x0f18, 0x0ec1, 0x0e6b, 0x0e16, 0x0dc2,
  0x0d70, 0x0d1f, 0x0ccf, 0x0c80, 0x0c33, 0x0be6, 0x0b9c, 0x0b52,
  0x0b0a, 0x0ac3, 0x0a7e, 0x0a3a, 0x09f7, 0x09b5, 0x0975, 0x0936,
  0x08f9, 0x08bc, 0x0881, 0x0848, 0x080f, 0x07d8, 0x07a2, 0x076e,
  0x073a, 0x0708, 0x06d7, 0x06a7, 0x0678, 0x064a, 0x061e, 0x05f2,
  0x05c8, 0x059f, 0x0576, 0x054f, 0x0529, 0x0503, 0x04df, 0x04bb,
  0x0499, 0x0477, 0x0457, 0x0437, 0x0418, 0x03fa, 0x03dc, 0x03c0,
  0x03a4, 0x0389, 0x036e, 0x0355, 0x033c, 0x0324, 0x030c, 0x02f5,
  0x02df, 0x02c9, 0x02b4, 0x02a0, 0x028c, 0x0279, 0x0266, 0x0254,
  0x0242, 0x0231, 0x0220, 0x0210, 0x0200, 0x01f1, 0x01e2, 0x01d4,
  0x01c6, 0x01b8, 0x01ab, 0x019e, 0x0192, 0x0186, 0x017a, 0x016f,
  0x0164, 0x0159, 0x014e, 0x0144, 0x013b, 0x0131, 0x0128, 0x011f,
  0x0116, 0x010e, 0x0106, 0x00fe, 0x00f6, 0x00ee, 0x00e7, 0x00e0,
  0x00d9, 0x00d3, 0x00cc, 0x00c6, 0x00c0, 0x00ba, 0x00b5, 0x00af,
  0x00aa, 0x00a4, 0x009f, 0x009b, 0x0096, 0x0091, 0x008d, 0x0089,
  0x0084, 0x0080, 0x007c, 0x0079, 0x0075, 0x0071, 0x006e, 0x006a,
  0x0067, 0x0064, 0x0061, 0x005e, 0x005b, 0x0058, 0x0056, 0x0053,
  0x0050, 0x004e, 0x004b, 0x0049, 0x0047, 0x0045, 0x0043, 0x0041,
  0x003f, 0x003d, 0x003b, 0x0039, 0x0037, 0x0035, 0x0034, 0x0032,
  0x0031, 0x002f, 0x002e, 0x002c, 0x002b, 0x002a, 0x0028, 0x0027,
  0x0026, 0x0025, 0x0023, 0x0022, 0x0021, 0x0020, 0x001f, 0x001e,
  0x001d, 0x001c, 0x001c, 0x001b, 0x001a, 0x0019, 0x0018, 0x0017,
  0x0017, 0x0016, 0x0015, 0x0015, 0x0014, 0x0013, 0x0013, 0x0012,
  0x0012, 0x0011, 0x0011, 0x0010, 0x000f, 0x000f, 0x000f, 0x000e,
  0x000e, 0x000d, 0x000d, 0x000c, 0x000c, 0x000c, 0x000b, 0x000b
};
    
// look-up table INVERSE LOGISTIC function
const net_t inv_sigmoid_lut[SPINN_SIGMD_RES] = 
{
  0x00000000, 0x000fffc5, 0x001fffaa, 0x002fffcf,
  0x00400055, 0x0050015a, 0x00600300, 0x00700565,
  0x008008ab, 0x00900cf2, 0x00a01259, 0x00b01901,
  0x00c0210a, 0x00d02a95, 0x00e035c2, 0x00f042b1,
  0x01005184, 0x0110625b, 0x01207556, 0x01308a97,
  0x0140a23f, 0x0150bc6f, 0x0160d947, 0x0170f8ea,
  0x01811b79, 0x01914116, 0x01a169e1, 0x01b195fe,
  0x01c1c58f, 0x01d1f8b5, 0x01e22f93, 0x01f26a4c,
  0x0202a903, 0x0212ebda, 0x022332f5, 0x02337e77,
  0x0243ce84, 0x02542340, 0x02647cce, 0x0274db54,
  0x02853ef6, 0x0295a7d8, 0x02a61620, 0x02b689f3,
  0x02c70377, 0x02d782d2, 0x02e80829, 0x02f893a5,
  0x0309256a, 0x0319bda2, 0x032a5c73, 0x033b0204,
  0x034bae80, 0x035c620d, 0x036d1cd5, 0x037ddf01,
  0x038ea8bc, 0x039f7a2f, 0x03b05385, 0x03c134e8,
  0x03d21e85, 0x03e31088, 0x03f40b1c, 0x04050e6f,
  0x04161aad, 0x04273005, 0x04384ea6, 0x044976bd,
  0x045aa87b, 0x046be40f, 0x047d29ab, 0x048e797e,
  0x049fd3bb, 0x04b13895, 0x04c2a83e, 0x04d422ea,
  0x04e5a8ce, 0x04f73a1d, 0x0508d70f, 0x051a7fd9,
  0x052c34b2, 0x053df5d3, 0x054fc375, 0x05619dd0,
  0x0573851f, 0x0585799d, 0x05977b86, 0x05a98b17,
  0x05bba88f, 0x05cdd42a, 0x05e00e2a, 0x05f256cf,
  0x0604ae5a, 0x0617150e, 0x06298b30, 0x063c1103,
  0x064ea6ce, 0x06614cd7, 0x06740368, 0x0686cac9,
  0x0699a346, 0x06ac8d2a, 0x06bf88c2, 0x06d2965e,
  0x06e5b64d, 0x06f8e8e0, 0x070c2e6b, 0x071f8742,
  0x0732f3bb, 0x0746742e, 0x075a08f3, 0x076db265,
  0x078170e2, 0x079544c7, 0x07a92e75, 0x07bd2e4d,
  0x07d144b4, 0x07e57210, 0x07f9b6c9, 0x080e1348,
  0x082287fb, 0x0837154f, 0x084bbbb6, 0x08607ba3,
  0x0875558c, 0x088a49e9, 0x089f5935, 0x08b483ed,
  0x08c9ca92, 0x08df2da8, 0x08f4adb3, 0x090a4b3e,
  0x092006d5, 0x0935e108, 0x094bda6a, 0x0961f390,
  0x09782d16, 0x098e8799, 0x09a503bc, 0x09bba222,
  0x09d26377, 0x09e94869, 0x0a0051a9, 0x0a177fef,
  0x0a2ed3f7, 0x0a464e81, 0x0a5df054, 0x0a75ba3a,
  0x0a8dad03, 0x0aa5c986, 0x0abe10a0, 0x0ad68331,
  0x0aef2223, 0x0b07ee65, 0x0b20e8ed, 0x0b3a12b8,
  0x0b536cc9, 0x0b6cf82f, 0x0b86b5fc, 0x0ba0a74e,
  0x0bbacd4a, 0x0bd5291e, 0x0befbc01, 0x0c0a8736,
  0x0c258c09, 0x0c40cbd0, 0x0c5c47ed, 0x0c7801ce,
  0x0c93faec, 0x0cb034ce, 0x0cccb109, 0x0ce9713f,
  0x0d06771f, 0x0d23c46b, 0x0d415af3, 0x0d5f3c98,
  0x0d7d6b4d, 0x0d9be918, 0x0dbab811, 0x0dd9da69,
  0x0df95261, 0x0e192254, 0x0e394cb6, 0x0e59d413,
  0x0e7abb11, 0x0e9c0474, 0x0ebdb31d, 0x0edfca0d,
  0x0f024c66, 0x0f253d6e, 0x0f48a092, 0x0f6c7964,
  0x0f90cba2, 0x0fb59b37, 0x0fdaec3f, 0x1000c307,
  0x10272414, 0x104e1425, 0x10759836, 0x109db586,
  0x10c6719d, 0x10efd24c, 0x1119ddb8, 0x11449a5d,
  0x11700f17, 0x119c4327, 0x11c93e3c, 0x11f7087c,
  0x1225aa90, 0x12552da8, 0x12859b91, 0x12b6feba,
  0x12e96246, 0x131cd21d, 0x13515aff, 0x13870a95,
  0x13bdef8d, 0x13f619b1, 0x142f9a07, 0x146a82ef,
  0x14a6e84f, 0x14e4dfb7, 0x1524809a, 0x1565e482,
  0x15a92756, 0x15ee67a3, 0x1635c6f9, 0x167f6a50,
  0x16cb7a83, 0x171a24e3, 0x176b9be2, 0x17c017e0,
  0x1817d824, 0x18732408, 0x18d24c69, 0x1935ad6e,
  0x199db0b6, 0x1a0ad024, 0x1a7d995a, 0x1af6b248,
  0x1b76df04, 0x1bff09a0, 0x1c904c9a, 0x1d2c0142,
  0x1dd3d3d5, 0x1e89e05e, 0x1f50dd65, 0x202c5d19,
  0x21213502, 0x22362b1e, 0x23752904, 0x24ed88ce,
  0x26b8f926, 0x290784d0, 0x2c44a1b6, 0x31c4649e
};

#endif
